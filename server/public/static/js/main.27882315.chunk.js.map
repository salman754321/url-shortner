{"version":3,"sources":["action.js","component/Form.js","component/Todo.js","component/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["require","config","CreateUrl","url","a","console","log","requestOptions","method","headers","body","JSON","stringify","fetch","then","response","json","data","Form","setUrl","Url","useState","Input","setInput","submitHandler","e","preventDefault","res","ur","slug","value","onChange","target","type","className","onClick","Todo","href","TodoList","map","urls","App","style","textAlign","color","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"+QAAAA,EAAQ,IAAUC,SACV,IAAMC,EAAS,uCAAC,WAAMC,GAAN,iBAAAC,EAAA,6DACpBC,QAAQC,IAAIH,GACNI,EAAiB,CACnBC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CAAET,IAAKA,KALZ,SAONU,MAAM,wCAAyCN,GAAgBO,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UAPjF,cAOlBC,EAPkB,OAShBZ,QAAQC,IAAIW,GATI,kBAUTA,GAVS,2CAAD,sDCyBRC,EAxBD,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,OAAOC,EAAS,EAATA,IAAS,EACLC,mBAAS,IADJ,mBACxBC,EADwB,KACjBC,EADiB,KAKzBC,EAAa,uCAAC,WAAMC,GAAN,iBAAArB,EAAA,6DAClBqB,EAAEC,iBACFrB,QAAQC,IAAIgB,GAFM,SAGHpB,EAAUoB,GAHP,OAGdK,EAHc,OAIdC,EAJc,4CAI0BD,EAAIE,MAChDV,EAAO,GAAD,mBAAKC,GAAL,CAASQ,KALG,2CAAD,sDAQhB,OACA,8BACE,2BAAOE,MAAOR,EAAOS,SAbP,SAACN,GAClBF,EAASE,EAAEO,OAAOF,QAY8BG,KAAK,OAAOC,UAAU,eACnE,4BAAQA,UAAU,cAAcC,QAASX,EAAeS,KAAK,UAC3D,uBAAGC,UAAU,0BCJNE,EAZF,SAAC,GAAW,IAAVjC,EAAS,EAATA,IAEX,OACI,yBAAK+B,UAAU,QACX,wBAAIA,UAAW,aACX,uBAAGF,OAAO,SAASK,KAAMlC,GAAOA,MCQjCmC,EAdE,SAAC,GAAW,IAAVlB,EAAS,EAATA,IACf,OACI,yBAAKc,UAAU,kBACf,wBAAIA,UAAU,aACXd,EAAImB,KAAI,SAAAC,GAAI,OACT,kBAAC,EAAD,CAAMrC,IAAKqC,UCYVC,MAbf,WAAgB,IAAD,EACSpB,mBAAS,IADlB,mBACND,EADM,KACDD,EADC,KAEb,OACE,yBAAKe,UAAU,OACb,wBAAIQ,MAAO,CAACC,UAAU,SAASC,MAAM,UAArC,gBAGA,kBAAC,EAAD,CAAMxB,IAAKA,EAAMD,OAAQA,IACzB,kBAAC,EAAD,CAAUC,IAAKA,MCFDyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3C,MAAK,SAAA4C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxD,QAAQwD,MAAMA,EAAMC,c","file":"static/js/main.27882315.chunk.js","sourcesContent":["require(\"dotenv\").config();\r\nexport  const CreateUrl=async(url)=>{\r\n    console.log(url)\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ url: url })\r\n    };\r\n  let data= await fetch('https://url-shrtner.herokuapp.com/url', requestOptions).then(response=>response.json());\r\n\r\n        console.log(data)\r\n        return data;\r\n}\r\n","import React,{useState} from 'react'\r\nimport {CreateUrl} from \"../action\"\r\n const Form = ({setUrl,Url}) => {\r\n const [Input, setInput] = useState(\"\");\r\n const inputHandler=(e)=>{\r\n   setInput(e.target.value);\r\n }\r\nconst  submitHandler=async(e)=>{\r\n   e.preventDefault();\r\n   console.log(Input)\r\n   let res= await CreateUrl(Input);\r\n   let ur=`https://url-shrtner.herokuapp.com/${res.slug}`;\r\n   setUrl([...Url,ur])\r\n\r\n }\r\n    return (\r\n    <form>\r\n      <input value={Input} onChange={inputHandler} type=\"text\" className=\"todo-input\" />\r\n      <button className=\"todo-button\" onClick={submitHandler} type=\"submit\">\r\n        <i className=\"fas fa-plus-square\"></i>\r\n      </button>\r\n    </form>\r\n        \r\n    )\r\n}\r\n\r\nexport default Form;\r\n","import React from 'react'\r\n\r\n\r\nconst Todo = ({url}) => {\r\n\r\n    return (\r\n        <div className=\"todo\">\r\n            <li className={\"todo-item\"}>\r\n                <a target=\"_blank\" href={url} >{url}</a> \r\n             </li>\r\n               \r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Todo\r\n","import React from 'react'\r\nimport Todo from \"./Todo\"\r\nconst TodoList = ({Url}) => {\r\n    return (\r\n        <div className=\"todo-container\">\r\n        <ul className=\"todo-list\">\r\n          {Url.map(urls=>(\r\n              <Todo url={urls}   />\r\n          ))}\r\n          \r\n\r\n        </ul>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default TodoList\r\n","import React,{useState} from 'react';\nimport './App.css';\nimport Form from \"./component/Form\"\nimport TodoList from \"./component/TodoList\"\n\n  \nfunction App() {\n  const [Url, setUrl] = useState([]);\n  return (\n    <div className=\"App\">\n      <h1 style={{textAlign:\"center\",color:\"black\"}}>\n        Url Shortner\n      </h1>\n      <Form Url={Url}  setUrl={setUrl} />\n      <TodoList Url={Url} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}